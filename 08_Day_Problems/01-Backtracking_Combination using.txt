//Combination using Backtracking

class Solution {
    void helper(int idx, int k, int count, int[] arr, List<Integer> ls, List<List<Integer>> ans) {
        if (count == k) {
            ans.add(new ArrayList<>(ls));
            return;
        }

        for (int i=idx; i<arr.length; i++) {
            ls.add(arr[i]);
            helper(i+1, k, count+1, arr, ls, ans);
            ls.remove(ls.size()-1);
        }
    }

    public List<List<Integer>> combine(int n, int k) {
        int[] arr = new int[n];
        for (int i=0; i<n; i++) {
            arr[i] = i+1;
        }

        List<List<Integer>> ans = new ArrayList<>();
        helper(0, k, 0, arr, new ArrayList<>(), ans);

        return ans;
    }
}

The intuition behind the code is to generate all possible combinations of k elements from the numbers 1 to n using a backtracking algorithm.

The backtracking algorithm explores all possible combinations by making decisions at each step and backtracking when necessary. It starts with an empty combination and gradually adds elements to it until the desired number of elements (k) is reached. At each step, it explores all possible choices for the next element, recursively constructing combinations by considering different elements.

The code uses a helper function helper to perform the recursive backtracking. The function takes the following parameters:

idx represents the current index in the array arr. It ensures that we only consider elements after the current index to avoid duplicate combinations.
k is the number of elements we need to select for each combination.
count keeps track of the number of elements selected so far.
arr is an array containing numbers from 1 to n.
ls is a list that stores the current combination being constructed.
ans is a list of lists that will store all the valid combinations.
The base case of the recursive function is when count is equal to k. This means that we have selected k elements, and a valid combination is formed. In this case, we add a copy of the current combination (ls) to the ans list using ans.add(new ArrayList<>(ls)). By creating a new list and adding a copy, we avoid modifying the combination during subsequent iterations.

The recursive part of the function is implemented using a loop that starts from the current index idx and iterates over the remaining elements in the arr array. For each element, it adds it to the ls list, increments count by 1, and makes a recursive call to the helper function with the updated parameters.

The recursive call explores the next level of the recursion, considering all possible elements that can follow the current one. It continues this process until either count reaches k (base case) or all elements have been considered.

After the recursive call returns, the last element is removed from the ls list using ls.remove(ls.size()-1). This step is crucial for backtracking. It removes the last element added to ls so that the algorithm can explore other possibilities by trying different elements in the current position.

In the combine function, an array arr is created and initialized with numbers from 1 to n. Then, an empty list ans is initialized to store the final combinations. The helper function is called with initial parameters, and the result ans is returned.

The overall intuition is to systematically explore all possible combinations by trying different elements at each position and constructing valid combinations by backtracking when necessary. By using recursion and maintaining appropriate state variables, the code generates all possible combinations of k elements from the numbers 1 to n.


